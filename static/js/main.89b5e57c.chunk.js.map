{"version":3,"sources":["App.module.css","assets/validates.js","components/IpSettings.js","components/DNSSettings.js","components/EthernetSettings.js","components/EnableWirelessSettings.js","components/WirelessSettings.js","components/Buttons.js","components/NetworkSettings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","regIp","regMask","validateIP","value","error","test","validateMask","validateGateway","validateDNSPreferred","validateDNSAlternative","validateKey","length","validateNetworkName","IpSettings","onChange","ipAddress","subnetMask","defaultGateway","setting","disabledWireless","disabled","setDisabled","setValue","setErrors","setFieldValue","className","s","radioGroup","RadioGroup","event","target","FormControlLabel","ipAddressAutoString","control","Radio","color","size","label","onClick","setTimeout","ipAddressUseString","inputs","component","name","labelForInputs","htmlFor","star","type","id","validate","DNSSettings","preferredDNS","alternativeDNS","dnsAddressAutoString","dnsAddressUseString","EthernetSettings","disabledEthernetIp","setDisabledEthernetIp","valueEthernetIp","setValueEthernetIp","setValueEthernetDns","disabledEthernetDns","setDisabledEthernetDns","valueEthernetDns","wrapperEthernet","settingTitle","EnableWirelessSettings","wirelessNetworkName","securityKey","changeDisabled","disabledKey","setDisabledKey","setDisabledWirelessIp","setDisabledWirelessDns","setValueWirelessIp","setValueWirelessDns","Checkbox","inputProps","checked","as","btnRefresh","btnDisabled","variant","WirelessSettings","disabledWirelessIp","valueWirelessIp","valueWirelessDns","disabledWirelessDns","wrapperWireless","Buttons","errors","handleReset","touched","setDisabledWireless","useState","message","setMessage","buttons","Button","_","isEmpty","NetworkSettings","wrapper","initialValues","ethernetSettings","wirelessSettings","onSubmit","values","console","log","JSON","stringify","validateOnChange","validateOnBlur","validateOnMount","handleSubmit","handleChange","form","settingsContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.89b5e57c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__20t3c\",\"form\":\"App_form__2G1OM\",\"settingsContainer\":\"App_settingsContainer__1k1QZ\",\"buttons\":\"App_buttons__2o24w\",\"wrapperEthernet\":\"App_wrapperEthernet__1MAiI\",\"star\":\"App_star__1gwaZ\",\"wirelessNetworkName\":\"App_wirelessNetworkName__1LhvU\",\"btnRefresh\":\"App_btnRefresh__2WM6p\",\"btnDisabled\":\"App_btnDisabled__3aEJB\",\"disabled\":\"App_disabled__3AzUz\",\"settingTitle\":\"App_settingTitle__1v8Zz\",\"radioGroup\":\"App_radioGroup__2GWB8\",\"inputs\":\"App_inputs__1W2K9\",\"labelForInputs\":\"App_labelForInputs__a5mYw\",\"securityKey\":\"App_securityKey__cM2NO\",\"message\":\"App_message__3_hTm\",\"error\":\"App_error__2fozo\"};","const regIp = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n\r\nconst regMask  =/^(((255\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\.){2}(255|254|252|248|240|224|192|128|0+)\\.0)|((255\\.)(255|254|252|248|240|224|192|128|0+)(\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\.0+){3}))$/;\r\n\r\n\r\nexport function validateIP(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!regIp.test(value)) {\r\n        error = 'Invalid IP';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateMask(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!regMask.test(value)) {\r\n        error = 'Invalid Subnet Mask'\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateGateway(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = null;\r\n    }\r\n    else if (!regIp.test(value)) {\r\n        error = 'Invalid Gateway';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateDNSPreferred(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!regIp.test(value)) {\r\n        error = 'Invalid DNS';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateDNSAlternative(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = null;\r\n    }\r\n    else if (!regIp.test(value)) {\r\n        error = 'Invalid DNS';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateKey(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (value.length < 8) {\r\n        error = 'Must be at least 8 symbols';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport function validateNetworkName(value) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Select name';\r\n    }\r\n    return error;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport s from \"../App.module.css\";\r\nimport {ErrorMessage, Field} from \"formik\";\r\nimport {validateGateway, validateIP, validateMask} from \"../assets/validates\";\r\nimport {ipAddressAutoString, ipAddressUseString} from \"../App\";\r\n\r\n\r\nexport const IpSettings = ({\r\n                               onChange, ipAddress, subnetMask, defaultGateway, setting, disabledWireless,\r\n                               disabled, setDisabled, value, setValue, setErrors, setFieldValue\r\n                           }) => {\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={s.radioGroup}>\r\n                <RadioGroup value={value} onChange={handleChange}>\r\n                    <FormControlLabel value={ipAddressAutoString}\r\n                                      control={<Radio color='primary' size='small'/>}\r\n                                      label={ipAddressAutoString}\r\n                                      onClick={() => {\r\n                                          setDisabled(true);\r\n                                          setFieldValue(`${setting}.ipAddress`, '');\r\n                                          setFieldValue(`${setting}.subnetMask`, '');\r\n                                          setFieldValue(`${setting}.defaultGateway`, '');\r\n                                          setTimeout(() => {\r\n                                              setErrors({});\r\n                                          }, 0);\r\n                                      }}\r\n                                      disabled={disabledWireless}/>\r\n                    <FormControlLabel value={ipAddressUseString}\r\n                                      control={<Radio color='primary' size='small'/>}\r\n                                      label={ipAddressUseString}\r\n                                      onClick={() => {\r\n                                          setDisabled(false)\r\n                                      }}\r\n                                      disabled={disabledWireless}/>\r\n                </RadioGroup>\r\n            </div>\r\n            <div className={s.inputs}>\r\n                <div>\r\n                    <ErrorMessage component=\"span\" name={`${setting}.ipAddress`} className={s.error}/>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}\r\n                           htmlFor={`${setting}.ipAddress`}>\r\n                        IP address:<span className={s.star}>*</span>\r\n                    </label>\r\n                    <Field type=\"text\"\r\n                           id={`${setting}.ipAddress`}\r\n                           name={`${setting}.ipAddress`}\r\n                           onChange={onChange}\r\n                           value={ipAddress}\r\n                           validate={!disabled ? validateIP : null}\r\n                           disabled={disabled}/>\r\n                </div>\r\n                <div>\r\n                    <ErrorMessage component=\"span\" name={`${setting}.subnetMask`} className={s.error}/>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}\r\n                           htmlFor={`${setting}.subnetMask`}>\r\n                        Subnet Mask:<span className={s.star}>*</span>\r\n                    </label>\r\n                    <Field type=\"text\"\r\n                           id={`${setting}.subnetMask`}\r\n                           name={`${setting}.subnetMask`}\r\n                           onChange={onChange}\r\n                           value={subnetMask}\r\n                           validate={!disabled ? validateMask : null}\r\n                           disabled={disabled}/>\r\n                </div>\r\n                <div>\r\n                    <ErrorMessage component=\"span\" name={`${setting}.defaultGateway`} className={s.error}/>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}\r\n                           htmlFor={`${setting}.defaultGateway`}>Default Gateway:</label>\r\n                    <Field type={'text'}\r\n                           id={`${setting}.defaultGateway`}\r\n                           name={`${setting}.defaultGateway`}\r\n                           onChange={onChange}\r\n                           value={defaultGateway}\r\n                           validate={!disabled ? validateGateway : null}\r\n                           disabled={disabled}/>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport s from \"../App.module.css\";\r\nimport {ErrorMessage, Field} from \"formik\";\r\nimport {validateDNSAlternative, validateDNSPreferred} from \"../assets/validates\";\r\nimport {dnsAddressAutoString, dnsAddressUseString} from \"../App\";\r\n\r\n\r\nexport const DNSSettings = ({\r\n                                onChange, preferredDNS, alternativeDNS, setting, disabledWireless, disabled,\r\n                                setDisabled, value, setValue, setErrors, setFieldValue\r\n                            }) => {\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n    return (\r\n        <>\r\n            <div className={s.radioGroup}>\r\n                <RadioGroup value={value} onChange={handleChange}>\r\n                    <FormControlLabel value={dnsAddressAutoString}\r\n                                      control={<Radio color=\"primary\" size='small'/>}\r\n                                      label={dnsAddressAutoString}\r\n                                      onClick={() => {\r\n                                          setDisabled(true);\r\n                                          setFieldValue(`${setting}.preferredDNS`, '');\r\n                                          setFieldValue(`${setting}.alternativeDNS`, '');\r\n                                          setTimeout(() => {\r\n                                              setErrors({})\r\n                                          }, 0);\r\n                                      }}\r\n                                      disabled={disabledWireless}/>\r\n                    <FormControlLabel value={dnsAddressUseString}\r\n                                      control={<Radio color=\"primary\" size='small'/>}\r\n                                      label={dnsAddressUseString}\r\n                                      onClick={() => {\r\n                                          setDisabled(false)\r\n                                      }}\r\n                                      disabled={disabledWireless}/>\r\n                </RadioGroup>\r\n            </div>\r\n            <div className={s.inputs}>\r\n                <div>\r\n                    <ErrorMessage component=\"span\" name={`${setting}.preferredDNS`} className={s.error}/>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}\r\n                           htmlFor={`${setting}.preferredDNS`}>\r\n                        Preferred DNS server:<span className={s.star}>*</span>\r\n                    </label>\r\n                    <Field type=\"text\"\r\n                           id={`${setting}.preferredDNS`}\r\n                           name={`${setting}.preferredDNS`}\r\n                           onChange={onChange}\r\n                           value={preferredDNS}\r\n                           validate={!disabled ? validateDNSPreferred : null}\r\n                           disabled={disabled}/>\r\n                </div>\r\n                <div>\r\n                    <ErrorMessage component=\"span\" name={`${setting}.alternativeDNS`} className={s.error}/>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}\r\n                           htmlFor={`${setting}.alternativeDNS`}>Alternative DNS\r\n                        server:</label>\r\n                    <Field type=\"text\"\r\n                           id={`${setting}.alternativeDNS`}\r\n                           name={`${setting}.alternativeDNS`}\r\n                           onChange={onChange}\r\n                           value={alternativeDNS}\r\n                           validate={!disabled ? validateDNSAlternative : null}\r\n                           disabled={disabled}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {IpSettings} from \"./IpSettings\";\r\nimport {DNSSettings} from \"./DNSSettings\";\r\n\r\nexport const EthernetSettings = ({\r\n                                     onChange, ipAddress, subnetMask, defaultGateway, preferredDNS, alternativeDNS,\r\n                                     disabledEthernetIp, setDisabledEthernetIp, valueEthernetIp, setValueEthernetIp,\r\n                                     setting,  setValueEthernetDns, disabledEthernetDns,\r\n                                     setDisabledEthernetDns, valueEthernetDns,setErrors,setFieldValue\r\n                                 }) => {\r\n\r\n    return (\r\n        <div className={s.wrapperEthernet}>\r\n            <div className={s.settingTitle}>\r\n                <span>Ethernet Settings</span>\r\n            </div>\r\n            <IpSettings onChange={onChange}\r\n                        ipAddress={ipAddress}\r\n                        subnetMask={subnetMask}\r\n                        defaultGateway={defaultGateway}\r\n                        setting={setting}\r\n                        disabled={disabledEthernetIp}\r\n                        setDisabled={setDisabledEthernetIp}\r\n                        value={valueEthernetIp}\r\n                        setValue={setValueEthernetIp}\r\n                        setErrors={setErrors}\r\n                        setFieldValue={setFieldValue}/>\r\n\r\n            <DNSSettings onChange={onChange}\r\n                         preferredDNS={preferredDNS}\r\n                         alternativeDNS={alternativeDNS}\r\n                         setting={setting}\r\n                         disabled={disabledEthernetDns}\r\n                         setDisabled={setDisabledEthernetDns}\r\n                         value={valueEthernetDns}\r\n                         setValue={setValueEthernetDns}\r\n                         setErrors={setErrors}\r\n                         setFieldValue={setFieldValue}/>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport s from \"../App.module.css\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport {ErrorMessage, Field} from \"formik\";\r\nimport {validateKey, validateNetworkName} from \"../assets/validates\";\r\nimport {dnsAddressAutoString, ipAddressAutoString} from \"../App\";\r\n\r\n\r\nexport const EnableWirelessSettings = ({\r\n                                           onChange, wirelessNetworkName, securityKey, setting, disabled, changeDisabled,\r\n                                           disabledKey, setDisabledKey, setErrors, setFieldValue, setDisabledWirelessIp,\r\n                                           setDisabledWirelessDns, setValueWirelessIp, setValueWirelessDns\r\n                                       }) => {\r\n\r\n\r\n    const changeDisabledKey = () => {\r\n        if (disabledKey) {\r\n            setDisabledKey(false)\r\n        } else {\r\n            setDisabledKey(true);\r\n            setErrors(null)\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div>\r\n                <Checkbox color=\"primary\"\r\n                          inputProps={{'aria-label': 'secondary checkbox'}}\r\n                          id={'enableWifi'}\r\n                          onClick={() => {\r\n                              changeDisabled();\r\n                              setDisabledKey(true);\r\n                              setDisabledWirelessIp(true);\r\n                              setDisabledWirelessDns(true);\r\n                              setValueWirelessIp(ipAddressAutoString);\r\n                              setValueWirelessDns(dnsAddressAutoString);\r\n                              setFieldValue(`${setting}.securityKey`, '');\r\n                              setFieldValue(`${setting}.wirelessNetworkName`, '');\r\n                              setFieldValue(`${setting}.ipAddress`, '');\r\n                              setFieldValue(`${setting}.subnetMask`, '');\r\n                              setFieldValue(`${setting}.defaultGateway`, '');\r\n                              setFieldValue(`${setting}.preferredDNS`, '');\r\n                              setFieldValue(`${setting}.alternativeDNS`, '');\r\n                              setTimeout(() => {\r\n                                  setErrors({})\r\n                              }, 0);\r\n                          }} checked={!disabled}/>\r\n                <label htmlFor={'enableWifi'}>Enable wifi:</label>\r\n            </div>\r\n            <ErrorMessage component=\"div\" name={`${setting}.wirelessNetworkName`} className={s.error}/>\r\n            <div className={s.wirelessNetworkName}>\r\n\r\n                <div>\r\n                    <label className={`${s.labelForInputs} ${disabled === true ? s.disabled : ''}`}>\r\n                        Wireless Network Name: <span className={s.star}>*</span>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <Field as=\"select\" name={`${setting}.wirelessNetworkName`}\r\n                           onChange={onChange}\r\n                           value={wirelessNetworkName}\r\n                           disabled={disabled}\r\n                           validate={!disabled ? validateNetworkName : null}>\r\n                        <option value={''}>Please select</option>\r\n                        <option value={'name one'}>name one</option>\r\n                        <option value={'name two'} name='name two'>name two</option>\r\n                        <option value={'name three'} name='name three'>name three</option>\r\n                    </Field>\r\n                </div>\r\n                <div>\r\n                    <button className={`${s.btnRefresh}  ${disabled === true ? s.btnDisabled : ''}`} type=\"button\"\r\n                            disabled={disabled}\r\n                            onClick={() => {\r\n\r\n                            }}>\r\n                        <RefreshIcon color=\"primary\" variant=\"outlined\" size=\"small\"/>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Checkbox color=\"primary\"\r\n                          inputProps={{'aria-label': 'secondary checkbox'}}\r\n                          id={'security'}\r\n                          disabled={disabled}\r\n                          checked={!disabledKey}\r\n                          onClick={() => {\r\n                              changeDisabledKey();\r\n                              setFieldValue(`${setting}.securityKey`, '');\r\n                              setTimeout(() => {\r\n                                  setErrors({})\r\n                              }, 0);\r\n                          }}/>\r\n                <label htmlFor={'security'} className={`${disabled === true ? s.disabled : ''}`}>\r\n                    Enable Wireless Security:</label>\r\n            </div>\r\n\r\n            <div className={s.securityKey}>\r\n                <ErrorMessage component=\"span\" name={`${setting}.securityKey`} className={s.error}/>\r\n                <label className={`${s.labelForInputs} ${disabledKey === true ? s.disabled : ''}`}\r\n                       htmlFor={`${setting}.securityKey`}>\r\n                    Security key:<span className={s.star}>*</span>\r\n                </label>\r\n                <Field type=\"text\"\r\n                       id={`${setting}.securityKey`}\r\n                       name={`${setting}.securityKey`}\r\n                       onChange={onChange}\r\n                       value={securityKey}\r\n                       validate={!disabledKey ? validateKey : null}\r\n                       disabled={disabledKey}/>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {EnableWirelessSettings} from \"./EnableWirelessSettings\";\r\nimport {IpSettings} from \"./IpSettings\";\r\nimport {DNSSettings} from \"./DNSSettings\";\r\n\r\n\r\nexport const WirelessSettings = (\r\n    {\r\n        onChange, wirelessNetworkName, securityKey, ipAddress,\r\n        subnetMask, defaultGateway, preferredDNS, alternativeDNS,setting,disabledKey, setDisabledKey,\r\n        disabledWireless,changeDisabled,disabledWirelessIp,setDisabledWirelessIp,valueWirelessIp,setValueWirelessIp,\r\n        valueWirelessDns,setValueWirelessDns,disabledWirelessDns,setDisabledWirelessDns,setErrors,setFieldValue\r\n    }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.wrapperWireless}>\r\n            <div className={s.settingTitle}>\r\n                <span>Wireless Settings</span>\r\n            </div>\r\n            <EnableWirelessSettings onChange={onChange}\r\n                                    wirelessNetworkName={wirelessNetworkName}\r\n                                    securityKey={securityKey}\r\n                                    setting={setting}\r\n                                    disabled={disabledWireless}\r\n                                    changeDisabled={changeDisabled}\r\n                                    disabledKey={disabledKey}\r\n                                    setDisabledKey={setDisabledKey}\r\n                                    setErrors={setErrors}\r\n                                    setFieldValue={setFieldValue}\r\n                                    setDisabledWirelessIp={setDisabledWirelessIp}\r\n                                    setDisabledWirelessDns={setDisabledWirelessDns}\r\n                                    setValueWirelessDns={setValueWirelessDns}\r\n                                    setValueWirelessIp={setValueWirelessIp}/>\r\n\r\n            <IpSettings onChange={onChange}\r\n                        ipAddress={ipAddress}\r\n                        subnetMask={subnetMask}\r\n                        defaultGateway={defaultGateway}\r\n                        setting={setting}\r\n                        disabledWireless={disabledWireless}\r\n                        disabled={disabledWirelessIp}\r\n                        setDisabled={setDisabledWirelessIp}\r\n                        value={valueWirelessIp}\r\n                        setValue={setValueWirelessIp}\r\n                        setErrors={setErrors}\r\n                        setFieldValue={setFieldValue}/>\r\n            <DNSSettings onChange={onChange}\r\n                         preferredDNS={preferredDNS}\r\n                         alternativeDNS={alternativeDNS}\r\n                         setting={setting}\r\n                         disabledWireless={disabledWireless}\r\n                         disabled={disabledWirelessDns}\r\n                         setDisabled={setDisabledWirelessDns}\r\n                         value={valueWirelessDns}\r\n                         setValue={setValueWirelessDns}\r\n                         setErrors={setErrors}\r\n                         setFieldValue={setFieldValue}/>\r\n        </div>\r\n    )\r\n};\r\n","import React, {useState} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport _ from \"lodash\";\r\nimport {dnsAddressAutoString, ipAddressAutoString} from \"../App\";\r\n\r\nexport const Buttons = ({\r\n                            errors, handleReset, touched, setDisabledEthernetIp, setValueEthernetIp,\r\n                            setValueEthernetDns, setDisabledEthernetDns, setDisabledKey,\r\n                            setDisabledWireless, setDisabledWirelessIp, setValueWirelessIp,\r\n                            setValueWirelessDns, setDisabledWirelessDns\r\n                        }) => {\r\n    const [message, setMessage] = useState('');\r\n\r\n    return (\r\n        <div className={s.buttons}>\r\n            <Button type='submit'\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        setMessage('your settings are saved')\r\n                    }}\r\n                    disabled={!_.isEmpty(errors) && !_.isEmpty(touched)}>\r\n                Save\r\n            </Button>\r\n            <Button type='button'\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        setValueEthernetIp(ipAddressAutoString);\r\n                        setDisabledEthernetIp(true);\r\n                        setValueEthernetDns(dnsAddressAutoString);\r\n                        setDisabledEthernetDns(true);\r\n                        setDisabledKey(true);\r\n                        setDisabledWireless(true);\r\n                        setDisabledWirelessIp(true);\r\n                        setValueWirelessIp(ipAddressAutoString);\r\n                        setValueWirelessDns(dnsAddressAutoString);\r\n                        setDisabledWirelessDns(true);\r\n                        handleReset();\r\n                        setMessage('your settings are reset(or redirect)')\r\n                    }}>\r\n                Cancel\r\n            </Button>\r\n            <span className={s.message}>{message}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {EthernetSettings} from \"./EthernetSettings\";\r\nimport {WirelessSettings} from \"./WirelessSettings\";\r\nimport {Buttons} from \"./Buttons\";\r\nimport {dnsAddressAutoString, ipAddressAutoString} from \"../App\";\r\n\r\nexport const NetworkSettings = ()=> {\r\n\r\n    const [disabledEthernetIp, setDisabledEthernetIp] = useState(true);\r\n    const [valueEthernetIp, setValueEthernetIp] = useState(ipAddressAutoString);\r\n    const [valueEthernetDns, setValueEthernetDns] = useState(dnsAddressAutoString);\r\n    const [disabledEthernetDns, setDisabledEthernetDns] = useState(true);\r\n\r\n    const [disabledKey, setDisabledKey] = useState(true);\r\n    const [disabledWireless, setDisabledWireless] = useState(true);\r\n    const [disabledWirelessIp, setDisabledWirelessIp] = useState(true);\r\n    const [valueWirelessIp, setValueWirelessIp] = useState(ipAddressAutoString);\r\n    const [valueWirelessDns, setValueWirelessDns] = useState(dnsAddressAutoString);\r\n    const [disabledWirelessDns, setDisabledWirelessDns] = useState(true);\r\n\r\n    const changeDisabled = () => {\r\n        if (disabledWireless) {\r\n            setDisabledWireless(false)\r\n        } else {\r\n            setDisabledWireless(true)\r\n\r\n        }\r\n    };\r\n    const initialValues = {\r\n        ethernetSettings: {\r\n            ipAddress: '',\r\n            subnetMask: '',\r\n            defaultGateway: '',\r\n            preferredDNS: '',\r\n            alternativeDNS: ''\r\n        },\r\n        wirelessSettings: {\r\n            wirelessNetworkName: '',\r\n            securityKey: '',\r\n            ipAddress: '',\r\n            subnetMask: '',\r\n            defaultGateway: '',\r\n            preferredDNS: '',\r\n            alternativeDNS: ''\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={values => {\r\n                    console.log('SETTINGS:', JSON.stringify([values], null, 2))\r\n                }}\r\n                validateOnChange={true}\r\n                validateOnBlur={true}\r\n                validateOnMount={true}>\r\n                {({handleSubmit, handleChange, values, errors, handleReset, touched,setErrors,setFieldValue}) => (\r\n                    <Form onSubmit={handleSubmit} className={s.form}>\r\n                        <div className={s.settingsContainer}>\r\n                            <EthernetSettings onChange={handleChange}\r\n                                              ipAddress={values.ethernetSettings.ipAddress}\r\n                                              subnetMask={values.ethernetSettings.subnetMask}\r\n                                              defaultGateway={values.ethernetSettings.defaultGateway}\r\n                                              preferredDNS={values.ethernetSettings.preferredDNS}\r\n                                              alternativeDNS={values.ethernetSettings.alternativeDNS}\r\n                                              disabledEthernetIp={disabledEthernetIp}\r\n                                              setDisabledEthernetIp={setDisabledEthernetIp}\r\n                                              valueEthernetIp={valueEthernetIp}\r\n                                              setValueEthernetIp={setValueEthernetIp}\r\n                                              setting={'ethernetSettings'}\r\n                                              valueEthernetDns={valueEthernetDns}\r\n                                              setValueEthernetDns={setValueEthernetDns}\r\n                                              disabledEthernetDns={disabledEthernetDns}\r\n                                              setDisabledEthernetDns={setDisabledEthernetDns}\r\n                                              setErrors={setErrors}\r\n                                              setFieldValue={setFieldValue}/>\r\n\r\n                            <WirelessSettings onChange={handleChange}\r\n                                              wirelessNetworkName={values.wirelessSettings.wirelessNetworkName}\r\n                                              securityKey={values.wirelessSettings.securityKey}\r\n                                              ipAddress={values.wirelessSettings.ipAddress}\r\n                                              subnetMask={values.wirelessSettings.subnetMask}\r\n                                              defaultGateway={values.wirelessSettings.defaultGateway}\r\n                                              preferredDNS={values.wirelessSettings.preferredDNS}\r\n                                              alternativeDNS={values.wirelessSettings.alternativeDNS}\r\n                                              setting={'wirelessSettings'}\r\n                                              disabledKey={disabledKey}\r\n                                              setDisabledKey={setDisabledKey}\r\n                                              disabledWireless={disabledWireless}\r\n                                              changeDisabled={changeDisabled}\r\n                                              disabledWirelessIp={disabledWirelessIp}\r\n                                              setDisabledWirelessIp={setDisabledWirelessIp}\r\n                                              valueWirelessIp={valueWirelessIp}\r\n                                              setValueWirelessIp={setValueWirelessIp}\r\n                                              valueWirelessDns={valueWirelessDns}\r\n                                              setValueWirelessDns={setValueWirelessDns}\r\n                                              disabledWirelessDns={disabledWirelessDns}\r\n                                              setDisabledWirelessDns={setDisabledWirelessDns}\r\n                                              setErrors={setErrors}\r\n                                              setFieldValue={setFieldValue}/>\r\n\r\n                        </div>\r\n                        <Buttons errors={errors} handleReset={handleReset} touched={touched}\r\n                                 setDisabledEthernetIp={setDisabledEthernetIp}\r\n                                 setValueEthernetIp={setValueEthernetIp}\r\n                                 setValueEthernetDns={setValueEthernetDns}\r\n                                 setDisabledEthernetDns={setDisabledEthernetDns}\r\n                                 setDisabledKey={setDisabledKey}\r\n                                 setDisabledWireless={setDisabledWireless}\r\n                                 setDisabledWirelessIp={setDisabledWirelessIp}\r\n                                 setValueWirelessIp={setValueWirelessIp}\r\n                                 setValueWirelessDns={setValueWirelessDns}\r\n                                 setDisabledWirelessDns={setDisabledWirelessDns}/>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\nimport {NetworkSettings} from \"./components/NetworkSettings\";\n\nexport const ipAddressAutoString = \"Obtain an IP address automatically (DHCP/BootP)\";\nexport const ipAddressUseString = \"Use the following IP address:\";\nexport const dnsAddressAutoString = \"Obtain DNS server address automatically\";\nexport const dnsAddressUseString = \"Use the following DS server address:\";\n\nexport const App = () => {\n\n    return <NetworkSettings/>\n};\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}